#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# if any command in a pipe fails, kill the script (useful for indent)
set -o pipefail

indent() {
  while read line; do
    echo "       ${line}"
  done
}

# config
S3_BUCKET="bh-buildpack-mono"
MONO_VERSION="2.10.8"
XSP_VERSION="2.10.2"

# s3 packages
MONO_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/mono-${MONO_VERSION}.tar.gz"
XSP_PACKAGE="https://s3.amazonaws.com/heroku-buildpack-mono/xsp-${XSP_VERSION}.tgz"

# important directories: https://gist.github.com/fe7f04abbd9538b656c5
BUILD_DIR=$1
CACHE_DIR=$2

# NOTE: the rest of this script assumes that we're in the build directory
cd ${BUILD_DIR}

# vendor directories
VENDORED_MONO="$(mktmpdir mono)"

# download and unpack packages
echo "-----> Fetching Mono binaries"
mkdir -p $VENDORED_MONO && curl $MONO_PACKAGE -s -o - | tar xzf - -C $VENDORED_MONO

# vendor node into the slug
PATH="$BUILD_DIR/bin:$PATH"
echo "-----> Vendoring mono $MONO_VERSION"
mkdir -p "$BUILD_DIR/mono-build"
mkdir -p "$BUILD_DIR/mono-build/bin/"
cp -r "$VENDORED_MONO/bin/" "$BUILD_DIR/mono-build/"
mkdir -p "$BUILD_DIR/mono-build/etc/"
cp -r "$VENDORED_MONO/etc/" "$BUILD_DIR/mono-build/"
mkdir -p "$BUILD_DIR/mono-build/include/"
cp -r "$VENDORED_MONO/include/" "$BUILD_DIR/mono-build/"
mkdir -p "$BUILD_DIR/mono-build/lib/"
cp -r "$VENDORED_MONO/lib/" "$BUILD_DIR/mono-build/"
mkdir -p "$BUILD_DIR/mono-build/share/"
cp -r "$VENDORED_MONO/share/" "$BUILD_DIR/mono-build/"

# cache may not exist yet
mkdir -p ${CACHE_DIR}

echo "-----> Bundling XSP v${XSP_VERSION}"
if [ ! -d "${CACHE_DIR}/xsp" ]; then
  echo "Fetching XSP v${XSP_VERSION} @ ${XSP_PACKAGE}" | indent
  curl ${XSP_PACKAGE} --silent --max-time 600 -o - | tar xzf - -C ${CACHE_DIR}

  echo "Copying libraries to the GAC" | indent
  cp -r ${CACHE_DIR}/xsp/lib/mono/gac/* ${CACHE_DIR}/mono-build/lib/mono/gac/
fi
cp -r "${CACHE_DIR}/xsp" .

# find a solution file
SLN=$(find . -maxdepth 1 -iname "*.sln")
if [ $( echo "${SLN}" | wc -l ) -gt 1 ]; then
  echo "-----> Too many *.sln files"
  exit 1
fi

# compile an uploaded application
if [ "${SLN}" != "" ]; then
  echo "-----> Compiling Mono application"

  # need Mono in its expected location for xbuild to work
  ln -s "${CACHE_DIR}/mono-build" /app
  export PATH="/app/mono/bin:${PATH}"

  xbuild /property:Configuration=Release ${SLN} | indent
fi

echo "-----> Build SUCCESS"
