#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

DEPENDENCY_S3_BUCKET_PATH="http://s3.amazonaws.com/mono-dependencies"

# config
MONO_VERSION="3.0.11"
XSP_VERSION="3.0.11"

# s3 packages
MONO_PACKAGE_URL="${DEPENDENCY_S3_BUCKET_PATH}/mono-${MONO_VERSION}.tar.gz"
XSP_PACKAGE_URL="${DEPENDENCY_S3_BUCKET_PATH}/xsp-${XSP_VERSION}.tar.gz"

BUILD_DIR=$1
CACHE_DIR=$2

cd ${BUILD_DIR}

# cache may not exist yet
mkdir -p ${CACHE_DIR}

echo "-----> Bundling Mono v${MONO_VERSION}"
MONO_CACHE_LOCATION=${CACHE_DIR}/mono-${MONO_VERSION}
if [ ! -d "${MONO_CACHE_LOCATION}" ]; then
  echo "Fetching Mono v${MONO_VERSION} @ ${MONO_PACKAGE_URL}"
  mkdir -p ${MONO_CACHE_LOCATION}
  cd ${MONO_CACHE_LOCATION}
  curl ${MONO_PACKAGE_URL} -s | tar xz
  cd ${BUILD_DIR}
fi

echo "-----> Bundling XSP v${XSP_VERSION}"
XSP_CACHE_LOCATION=${CACHE_DIR}/xsp-${XSP_VERSION}
if [ ! -d "${XSP_CACHE_LOCATION}" ]; then
  echo "Fetching ${XSP_VERSION} @ ${XSP_PACKAGE_URL}"
  mkdir -p ${XSP_CACHE_LOCATION}
  cd ${XSP_CACHE_LOCATION}
  curl ${XSP_PACKAGE_URL} -s | tar xz
  cd ${BUILD_DIR}

  echo "Copying libraries to the GAC"
  cp -r ${XSP_CACHE_LOCATION}/xsp/lib/mono/gac/* ${MONO_CACHE_LOCATION}/mono/lib/mono/gac/
fi

cp -r "${MONO_CACHE_LOCATION}/mono" .
# TODO: this is done because `ln -s` causes nuget to fail in subtle ways. Fix
cp -r "${MONO_CACHE_LOCATION}/mono" /app/.

cp -r "${XSP_CACHE_LOCATION}/xsp" .

# find a solution file
SLN=$(find . -maxdepth 1 -iname "*.sln")
if [ $( echo "${SLN}" | wc -l ) -gt 1 ]; then
echo "-----> Too many *.sln files"
  exit 1
fi

# compile an uploaded application
if [ "${SLN}" != "" ]; then
  echo "-----> Compiling Mono application"

#  ln -s "$BUILD_DIR/mono" /app

  export PATH="/app/mono/bin:${PATH}"
  export LD_LIBRARY_PATH="/app/mono/lib:${LD_LIBRARY_PATH}"

  # Import certs to make NuGet work
  mozroots --import --sync --quiet
  yes | certmgr -ssl https://nuget.org

  BUILD_CACHE_LOCATION=${CACHE_DIR}/build/
  mkdir -p ${BUILD_CACHE_LOCATION}

  # Build
  EnableNuGetPackageRestore=true xbuild /property:Configuration=Release /property:OutDir=${BUILD_CACHE_LOCATION} ${SLN}

  cp -r ${BUILD_CACHE_LOCATION}* ${BUILD_DIR}
fi

echo "-----> Build SUCCESS"
