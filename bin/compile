#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

DEPENDENCY_S3_BUCKET_PATH="http://s3.amazonaws.com/mono-dependencies"
MONO_VERSION="3.10.0"

BUILD_DIR=$1
CACHE_DIR=$2

function conditional_download() {
  DOWNLOAD_URL="$1"
  DESTINATION="$2"

  if [ ! -d ${DESTINATION} ]; then
    rm -rf ${DESTINATION}
    mkdir -p ${DESTINATION}
    echo "-----> Downloading ${DOWNLOAD_URL}"
    curl ${DOWNLOAD_URL} -s | tar xz -C ${DESTINATION}
  fi
}

LP_DIR=`cd $(dirname $0); cd ..; pwd`
cd ${BUILD_DIR}
mkdir -p ${CACHE_DIR}

MONO_CACHE_LOCATION=${CACHE_DIR}/$STACK/mono-${MONO_VERSION}
conditional_download ${DEPENDENCY_S3_BUCKET_PATH}/${STACK}/mono-${MONO_VERSION}.tar.gz ${MONO_CACHE_LOCATION}

# Copy mono from cache to where we're building the slug
cp -r "${MONO_CACHE_LOCATION}/mono" .
# Mono expects to be running out of /app
ln -s "$BUILD_DIR/mono" /app

export PATH="/app/mono/bin:${PATH}"
export LD_LIBRARY_PATH="/app/mono/lib:${LD_LIBRARY_PATH}"

# Add certs to trust store
cp -r ${LP_DIR}/.config ~/.
cp -r ${LP_DIR}/.config ${BUILD_DIR}/.

BUILD_CACHE_LOCATION=${CACHE_DIR}/build/
mkdir -p ${BUILD_CACHE_LOCATION}

cp -r ${BUILD_CACHE_LOCATION}* ${BUILD_DIR}

echo "-----> Running kpm restore"
kpm restore

PROJECT_JSON_FILE=$(find . -maxdepth 3 -iname "project.sln")
echo "-----> Building ${PROJECT_JSON_FILE}"
kpm pack --out ${BUILD_DIR} --no-source ${PROJECT_JSON_FILE}

mkdir -p ${BUILD_DIR}/.profile.d
cp -n ${LP_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/

NGINX_CACHE_PATH=${CACHE_DIR}/${STACK}/nginx
conditional_download ${DEPENDENCY_S3_BUCKET_PATH}/${STACK}/nginx.tar.gz ${NGINX_CACHE_PATH}

mkdir -p ${BUILD_DIR}/nginx
cp ${NGINX_CACHE_PATH}/nginx ${BUILD_DIR}/nginx/.
# Copy nginx configuration from buildpack dir
cp ${LP_DIR}/nginx/* ${BUILD_DIR}/nginx/.

echo "-----> Build SUCCESS"
